/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Deque<Integer> stack;

    public BSTIterator(TreeNode root) {
        stack = new ArrayDeque<>();
        helper(root);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(!stack.isEmpty())
            return true;
        else
            return false;
    }

    /** @return the next smallest number */
    public int next() {
        return stack.pop();
    }
    
    public void helper(TreeNode node){
        if(node==null)
            return;
        helper(node.right);
        stack.push(node.val);
        helper(node.left);
        return;
    }
    
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
