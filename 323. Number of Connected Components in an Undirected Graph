public class Solution {
    public int countComponents(int n, int[][] edges) {
        int[] reach = new int[n];
        Map<Integer, ArrayList<Integer>> map = new HashMap<>();
        int res = 0;
        for(int i=0; i<edges.length; i++){
            if(!map.containsKey(edges[i][0]))
                map.put(edges[i][0], new ArrayList<>());
            map.get(edges[i][0]).add(edges[i][1]);
            if(!map.containsKey(edges[i][1]))
                map.put(edges[i][1], new ArrayList<>());
            map.get(edges[i][1]).add(edges[i][0]);
        }
        Queue<Integer> que = new LinkedList<>();
        int count=0;
        while(count<n){
            for(int r=0; r<reach.length; r++){
                if(reach[r]==0){
                    que.offer(r);
                    break;
                }
            }
            while(!que.isEmpty()){
                int size = que.size();
                for(int j=0; j<size; j++){
                    int check = que.poll();
                    count++;
                    reach[check]=1;
                    if(!map.containsKey(check))
                        break;
                    for(Integer e : map.get(check)){
                        if(reach[e]==0 && !que.contains(e))
                            que.offer(e);
                    }
                }
            }
            res++;
        }
        return res;
        
    }
}
