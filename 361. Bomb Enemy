public class Solution {
    
    int[][] kill;
    int max=0;
    
    public int maxKilledEnemies(char[][] grid) {
        if(grid.length==0)
            return max;
        int m=grid.length;
        int n=grid[0].length;
        kill = new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]=='0')
                    helper(grid,i,j,m,n);
            }
        }
        return max;
        
    }
    
    private void helper(char[][] grid, int i, int j, int m, int n){
        for(int b=j-1; b>=0; b--){
            if(grid[i][b]=='E')
                kill[i][j]++;
            if(grid[i][b]=='W')
                break;
        }
        for(int b=j+1; b<n; b++){
            if(grid[i][b]=='E')
                kill[i][j]++;
            if(grid[i][b]=='W')
                break;            
        }
        for(int a=i-1; a>=0; a--){
            if(grid[a][j]=='E')
                kill[i][j]++;
            if(grid[a][j]=='W')
                break;            
        }        
        for(int a=i+1; a<m; a++){
            if(grid[a][j]=='E')
                kill[i][j]++;
            if(grid[a][j]=='W')
                break;   
        }
        max=Math.max(max,kill[i][j]);
    }
    
}
