/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

import java.util.concurrent.ThreadLocalRandom;
public class Solution {
    
    ListNode root;
    
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    public Solution(ListNode head) {
        root=head;
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int len=0;
        ListNode sum = root;
        while(sum!=null){
            sum=sum.next;
            len++;
        }
        int ranNum = ThreadLocalRandom.current().nextInt(0, len);
        int count=0;
        ListNode res=root;
        while(count<ranNum){
            res=res.next;
            count++;
        }
        return res.val;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
